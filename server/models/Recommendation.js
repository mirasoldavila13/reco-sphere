/**
 * Recommendation Model
 *
 * This module defines the schema and model for managing personalized recommendations in MongoDB.
 * It facilitates the storage of algorithm-driven suggestions, linking users to specific content
 * with detailed context and rationale.
 *
 * Key Features:
 * - **User-Content Association**:
 *   - Each recommendation links a specific `userId` with a `contentId`.
 * - **Customizable Rationale**:
 *   - Stores a human-readable explanation (`reason`) for why the recommendation was made.
 * - **Status Tracking**:
 *   - Tracks the current status of the recommendation, supporting lifecycle states like "viewed", "dismissed", or "pending".
 * - **Algorithm Context**:
 *   - Includes metadata about the algorithm type (e.g., collaborative filtering) and relevance scores.
 * - **Soft Deletion**:
 *   - Incorporates an `isDeleted` flag for preserving historical recommendations while hiding them from active queries.
 * - **Indexing for Data Integrity**:
 *   - Enforces unique recommendations per user-content pair to prevent duplicates.
 *
 * Schema Details:
 * - **Fields**:
 *   - `userId` (ObjectId, required): References the `User` model, linking the recommendation to a specific user.
 *   - `contentId` (ObjectId, required): References the `Content` model, associating the recommendation with specific media.
 *   - `reason` (String, optional): Provides a human-readable explanation for the recommendation.
 *   - `status` (String, optional): Tracks lifecycle states ("viewed", "dismissed", "pending").
 *   - `context` (Object, optional): Stores metadata such as algorithm type and relevance scores.
 *   - `isDeleted` (Boolean, default: `false`): Marks the recommendation as soft-deleted.
 * - **Timestamps**:
 *   - Automatically adds `createdAt` and `updatedAt` fields using Mongoose's `timestamps` feature.
 * - **Indexes**:
 *   - Enforces a unique index on `userId` and `contentId` to maintain data integrity.
 *
 * Use Cases:
 * - **Recommendation Engines**:
 *   - Store and manage personalized recommendations generated by machine learning models or heuristics.
 * - **User Feedback**:
 *   - Track user interactions with recommendations to refine algorithms and improve relevance.
 * - **Analytics**:
 *   - Analyze the effectiveness of recommendation algorithms using stored context and relevance scores.
 *
 * Example Usage:
 * ```javascript
 * import Recommendation from './models/Recommendation.js';
 *
 * // Create a new recommendation
 * const newRecommendation = new Recommendation({
 *   userId: "603d2c5b2f8fb814b56f1d85",
 *   contentId: "604e2c5b3f8ab814b65g1d92",
 *   reason: "Recommended based on your watch history.",
 *   context: {
 *     algorithm: "content-based-filtering",
 *     score: 0.85,
 *   },
 * });
 * await newRecommendation.save();
 *
 * // Update recommendation status
 * await Recommendation.findOneAndUpdate(
 *   { userId: "603d2c5b2f8fb814b56f1d85", contentId: "604e2c5b3f8ab814b65g1d92" },
 *   { $set: { status: "viewed" } }
 * );
 *
 * // Query recommendations for a user
 * const userRecommendations = await Recommendation.find({ userId: "603d2c5b2f8fb814b56f1d85" });
 *
 * // Soft delete a recommendation
 * await Recommendation.findOneAndUpdate(
 *   { userId: "603d2c5b2f8fb814b56f1d85", contentId: "604e2c5b3f8ab814b65g1d92" },
 *   { $set: { isDeleted: true } }
 * );
 * ```
 *
 * Security and Best Practices:
 * - Validate inputs for `userId`, `contentId`, and `context` fields to ensure data integrity.
 * - Use the `isDeleted` field to enable soft deletion, avoiding irreversible data loss.
 * - Apply indexing for efficient querying and to maintain the uniqueness of recommendations.
 *
 * Future Enhancements:
 * - **User Actions**: Track user interactions (e.g., "liked", "skipped") for improved personalization.
 * - **Batch Recommendations**: Add support for bulk recommendation creation and updates.
 * - **Expiration Logic**: Automatically expire old recommendations to maintain a fresh suggestion pool.
 * - **Advanced Scoring**: Include fields for secondary scoring metrics (e.g., diversity, novelty).
 *
 * Technologies:
 * - **Mongoose**: Provides schema validation, indexing, and query capabilities.
 * - **MongoDB**: Scales storage for large datasets of personalized recommendations.
 *
 * Summary:
 * The `Recommendation` model serves as a backbone for personalized, data-driven user engagement,
 * enabling dynamic, algorithm-powered suggestions.
 */

import mongoose from "mongoose";

const recommendationSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    contentId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Content",
      required: true,
    },
    reason: {
      type: String,
      default: "Recommended based on your preferences.",
      minlength: 10,
      maxlength: 500,
      trim: true,
    },
    status: {
      type: String,
      enum: ["viewed", "dismissed", "pending"],
      default: "pending",
    },
    context: {
      algorithm: {
        type: String,
        default: "collaborative-filtering",
      },
      score: {
        type: Number,
        default: null,
      },
    },
    isDeleted: {
      type: Boolean,
      default: false,
    },
  },
  { timestamps: true },
);

// Prevent duplicate recommendations for the same user and content
recommendationSchema.index({ userId: 1, contentId: 1 }, { unique: true });

const Recommendation = mongoose.model("Recommendation", recommendationSchema);

export default Recommendation;
